{"name":"Tutorial HTK: Reconocedor de Dígitos en español. ","tagline":"HTK, Dígitos, Español","body":"## Tarea\r\nA continuación implementaremos un reconocedor de dígitos en español, para ello utilizaremos HTK (una implementación de [Modelos Ocultos de Markov](http://es.wikipedia.org/wiki/Modelo_oculto_de_Márkov) y seguiremos los pasos recomendados en el [manual de HTK](http://htk.eng.cam.ac.uk/docs/docs.shtml) \r\n\r\n### Hacia dónde vamos?\r\nLa idea de este tutorial es lograr, a partir de grabaciones de audio que contienen dígitos (solo dígitos),  obtener la transcripción de salida. \r\n\r\n###Entrada\r\n ![12151516790](https://dl.dropboxusercontent.com/u/43547597/12151516790.png) \r\n\r\n###Salida\r\n\"1 2 1 5 1 5 1 6 7 9 0\"\r\n\r\n## Preámbulos\r\nLa tarea de reconocimiento del habla (speech recognition) se basa en .. \r\n\r\nmodelos ...\r\n\r\nhmms ..\r\n\r\n\r\n\r\n### Teoría detrás\r\n\r\n## Preparando el entorno\r\n\r\n### HTK en Ubuntu\r\n\r\nDescargar [The Hidden Markov Model Toolkit (HTK)](http://htk.eng.cam.ac.uk/download.shtml), luego, dentro de la carpeta descargada: \r\n\r\n```\r\n ./configure\r\nmake all\r\nsudo make install\r\n```\r\n\r\nSolución posible de algunos problemas probables:\r\n```\r\nsudo apt-get install gcc-multilib\r\nsudo apt-get install libx11-dev\r\n./configure --disable-hslab (por un error -lX11) (utilizar audacity para grabar en vez de hslab con labeling)\r\n```\r\n\r\n### HTK en MAC (Mountain Lion)\r\nInstalar XQuartz\r\n\r\nInstalar HTK usando los consejos que se dan en la esta [página] (http://aidiary.hatenablog.com/entry/20130113/1358046622), traducir usando el traductor de google por ejemplo y tener cuidado que los comandos también se traducen (próximamente agregaré los comandos en esta guía)\r\n\r\nBásicamente, indica que hay que agregar -I/usr/X11R6/include en los cflags de los makefiles que estan, en el directorio de htk y en htklib.\r\n\r\n### Organización del código\r\nPara lograr hacer funcionar el programa, deberemos fijar la ubicación de cada uno de los archivos que creemos, recomiendo utilizar la misma estructura que yo utilizo ya que los comandos están preparados para estas rutas. Por supuesto, al ir entendiendo cada uno de los comandos y scripts, los archivos podrán ser movidos a donde el que los utilice considere.\r\n\r\n[Aquí](https://dl.dropboxusercontent.com/u/43547597/code_organization.txt) podrán encontrar una posible organización y es en la cual me basaré a partir de ahora. La idea no es intentar entenderla desde un principio, sino consultarla cuando se tiene alguna duda. \r\n\r\n\r\n## Primer Parte: Preparando los datos\r\n\r\n### Paso 1: Gramática\r\nPara que nuestro programa entienda palabras, lo primero que debemos indicarle es que forma pueden tener las oraciones que grabemos.\r\n\r\nDado que en nuestro caso queremos reconocer dígitos, lo haremos con la siguiente grámatica:\r\n```\r\n$digito = UNO | DOS | TRES | CUATRO | CINCO | SEIS | SIETE | OCHO | NUEVE | CERO;\r\n( SENT-START ( <$digito> ) SENT-END )\r\n```\r\nNombre del archivo: [grammar](https://gist.github.com/pbrusco/5368750)\r\n\r\nMás info sobre el [formato](http://www.ee.columbia.edu/ln/LabROSA/doc/HTKBook21/node131.html)\r\n\r\nBásicamente, se indica a través de este archivo, que las grabaciones tendrán dígitos (uno o más). \r\n\r\n### Paso 2: Listado de palabras\r\n### Paso 3: Diccionario de fonemas\r\n\r\n\r\n\r\n\r\n## Segunda Parte: Generando el modelo\r\n\r\nCreate the phones dictionary and list:\r\n\r\n```\r\nHDMan -m -w Dictionary/DictionarySources/words-sorted.list -n Dictionary/phones.list -l dlog Dictionary/phones.dict Dictionary/DictionarySources/dict\r\n```\r\n\r\nRemove sp from phones.list and create another file including it (phones-with-sp.list)\r\n\r\nConvert the grammar into a wordnet format:\r\n```\r\nHParse Dictionary/DictionarySources/grammar Dictionary/DictionarySources/grammar.wordnet \r\n```\r\n\r\nCreate \"MFCCs words.mlf\"\r\n```\r\nirb Helpers/generate_mfccs_from_training.rb\r\n```\r\n(then, modify each element to contain a word transcription of what each file says)\r\n\r\n\r\nTranscribe words.mlf into phones.mlf (for training data in this case):\r\n```\r\nHLEd -l ’*’ -d Dictionary/phones.dict -i Data/train\\ MFCCs-phones.mlf Configs/HLEd.config Data/train\\ MFCCs-words.mlf\r\n```\r\n\r\nGenerate HCopy.script \r\n```\r\nirb Helpers/generate_hcopy_script.rb\r\n```\r\n\r\nGenerate MFCCs from wavs:\r\n```\r\nHCopy -T 1 -C Configs/HCopy.config -S Scripts/HCopy.script\r\n```\r\nCreate directories for models:\r\n\r\n```\r\nfor NUMBER in {0..9}\r\ndo\r\n  mkdir Models/hmm$NUMBER\r\ndone\r\n```\r\n\r\nGenerate HCompV.script file:\r\n```\r\nirb Helpers/generate_hcompv_script.rb\r\n```\r\n\r\nTrain first prototype model into hmm0 folder:\r\n```\r\nHCompV -C Configs/HCompV.config -f 0.01 -m -S Scripts/HCompV.script -M Models/hmm0 Models/prototype\r\n```\r\n\r\n--copy prototype to hmmdefs (to each phoneme) --\r\n--copy vFloors to macros -- \r\n\r\nGenerate HERest.script file:\r\n```\r\nirb Helpers/generate_herest_script.rb\r\n```\r\n\r\nGenerate and copy labels files into train folder. \r\n```\r\nirb Helpers/labels_from_wavs_script.rb \"Data/Recorded/waves/train/\" \"Data/Train/\"\r\n```\r\n(assuming each file has the same name that the label)\r\n\r\nRe-estimate using embedded re-estimation tool HERest:\r\n```\r\nHERest -T 1 -C Configs/HERest.config -I Data/train\\ MFCCs-phones.mlf -t 1000.0 1000.0 10000.0 -S Scripts/HERest.script -H Models/hmm0/macros -H Models/hmm0/hmmdefs -M Models/hmm1 Dictionary/phones.list\r\nHERest -T 1 -C Configs/HERest.config -I Data/train\\ MFCCs-phones.mlf -t 1000.0 1000.0 10000.0 -S Scripts/HERest.script -H Models/hmm1/macros -H Models/hmm1/hmmdefs -M Models/hmm2 Dictionary/phones.list\r\nHERest -T 1 -C Configs/HERest.config -I Data/train\\ MFCCs-phones.mlf -t 1000.0 1000.0 10000.0 -S Scripts/HERest.script -H Models/hmm2/macros -H Models/hmm2/hmmdefs -M Models/hmm3 Dictionary/phones.list\r\n```\r\n\r\n(After adding the new \"sp\" state after copying from hmm3 to hmm4 and adding sp using center state of sil) (http://www.voxforge.org/home/dev/acousticmodels/linux/create/htkjulius/tutorial/monophones/step-7)\r\n```\r\nHHEd -A -D -T 1 -H Models/hmm4/macros -H Models/hmm4/hmmdefs -M Models/hmm5 Configs/HHEd.config Dictionary/phones-with-sp.list\r\n```\r\n```\r\nHERest -T 1 -C Configs/HERest.config -I Data/train\\ MFCCs-phones.mlf -t 1000.0 1000.0 10000.0 -S Scripts/HERest.script -H Models/hmm5/macros -H Models/hmm5/hmmdefs -M Models/hmm6 Dictionary/phones-with-sp.list\r\nHERest -T 1 -C Configs/HERest.config -I Data/train\\ MFCCs-phones.mlf -t 1000.0 1000.0 10000.0 -S Scripts/HERest.script -H Models/hmm6/macros -H Models/hmm6/hmmdefs -M Models/hmm7 Dictionary/phones-with-sp.list\r\n```\r\n\r\nTest models: \r\nGenerate tests MFCCs:\r\n```\r\nHCopy -T 1 -C Configs/HCopyTests.config -S Scripts/HCopyTests.script\r\n```\r\nResults:\r\n```\r\nHVite -H Models/hmm7/macros -H Models/hmm7/hmmdefs -S Scripts/HVite.script -l ’*’ -i recout.mlf -w Dictionary/DictionarySources/grammar.wordnet -p 0.0 -s 5.0 Dictionary/phones.dict Dictionary/phones-with-sp.list\r\n```\r\nLive Results:\r\nHVite -H Models/hmm7/macros -H Models/hmm7/hmmdefs -C Configs/Live.config -w Dictionary/DictionarySources/grammar.wordnet -p 0.0 -s 5.0 Dictionary/phones.dict Dictionary/phones-with-sp.list","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}